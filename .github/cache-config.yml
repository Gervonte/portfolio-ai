# Cache Configuration for Portfolio AI
# This file defines cache strategies and configurations

# Cache Keys Strategy:
# 1. Primary key: Includes OS, Node version, package-lock.json hash, and source code hash
# 2. Restore keys: Fallback to less specific keys for better cache hits
# 3. Cache version: Increment when cache structure changes

# Cached Paths:
# - ~/.npm: npm cache directory
# - node_modules: Dependencies (restored from package-lock.json)
# - .next/cache: Next.js build cache
# - .next/static: Static assets cache
# - .next/standalone: Standalone build cache
# - .eslintcache: ESLint cache for faster linting
# - .tsbuildinfo: TypeScript incremental compilation cache

# Cache Invalidation:
# - Cache is invalidated when package-lock.json changes
# - Cache is invalidated when source code changes
# - Cache version can be incremented to force refresh
# - Old caches are cleaned up after 30 days

# Performance Benefits:
# - Faster dependency installation (npm ci with cached node_modules)
# - Faster builds (cached Next.js build artifacts)
# - Faster linting (cached ESLint results)
# - Faster TypeScript compilation (incremental compilation)

# Usage:
# 1. Use ci-cd-optimized.yml for basic caching
# 2. Use ci-cd-advanced-cache.yml for comprehensive caching
# 3. Adjust CACHE_VERSION in workflow files when needed
# 4. Monitor cache hit rates in GitHub Actions logs
