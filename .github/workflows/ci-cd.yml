name: CI/CD Pipeline (Advanced Build Cache)

on:
  push:
    branches: [main, preview]
  pull_request:
    branches: [main, preview]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10'
  CACHE_VERSION: 'v3'

jobs:
  # Lint and Type Check
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache dependencies and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .next/cache
            .next/static
            .next/standalone
            .eslintcache
            .tsbuildinfo
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.json') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ env.CACHE_VERSION }}
            ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}
            ${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Cache dependencies and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
            .next/static
            .next/standalone
            .eslintcache
            .tsbuildinfo
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.json') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}-${{ env.CACHE_VERSION }}
            ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}
            ${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint

      - name: Run TypeScript type check
        run: pnpm run type-check

      - name: Check Prettier formatting
        run: pnpm run format:check

  # Build and Test
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache dependencies and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .next/cache
            .next/static
            .next/standalone
            .eslintcache
            .tsbuildinfo
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.json') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ env.CACHE_VERSION }}
            ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}
            ${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Cache dependencies and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
            .next/static
            .next/standalone
            .eslintcache
            .tsbuildinfo
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.json') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}-${{ env.CACHE_VERSION }}
            ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}
            ${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build
        env:
          NODE_ENV: production
          RESEND_API_KEY: 'dummy_key_for_build'

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 7

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache dependencies and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .next/cache
            .next/static
            .next/standalone
            .eslintcache
            .tsbuildinfo
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.json') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ env.CACHE_VERSION }}
            ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}
            ${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

  # Performance Check
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache dependencies and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .next/cache
            .next/static
            .next/standalone
            .eslintcache
            .tsbuildinfo
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.json') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ env.CACHE_VERSION }}
            ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}
            ${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Cache dependencies and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
            .next/static
            .next/standalone
            .eslintcache
            .tsbuildinfo
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.json') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}-${{ env.CACHE_VERSION }}
            ${{ runner.os }}-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}
            ${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Start application
        run: |
          pnpm start &
          sleep 10

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: false
          temporaryPublicStorage: true

      - name: Upload Lighthouse Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse_results
          path: .lighthouseci/
          retention-days: 30

  # Cache cleanup job (optional)
  cache-cleanup:
    name: Cache Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Delete old caches
        uses: actions/github-script@v7
        with:
          script: |
            const { data: caches } = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 30); // Keep caches for 30 days
            
            for (const cache of caches.actions_caches) {
              if (new Date(cache.created_at) < cutoffDate) {
                await github.rest.actions.deleteActionsCache({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id
                });
                console.log(`Deleted cache: ${cache.key}`);
              }
            }

  # Note: Vercel handles deployment automatically
  # No need for GitHub Actions deployment since Vercel auto-deploys on push
