name: Build and Test

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version'
        required: false
        type: string
        default: '20'
      pnpm-version:
        description: 'pnpm version'
        required: false
        type: string
        default: '8'
      build-command:
        description: 'Build command to run'
        required: false
        type: string
        default: 'pnpm run build'
      test-commands:
        description: 'Test commands to run (space-separated)'
        required: false
        type: string
        default: 'pnpm run lint pnpm run type-check pnpm run format:check'
      upload-artifacts:
        description: 'Whether to upload build artifacts'
        required: false
        type: boolean
        default: true

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ inputs.pnpm-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .next/cache
            .next/static
            .next/standalone
            .eslintcache
            .tsbuildinfo
          key: ${{ runner.os }}-${{ inputs.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.json') }}-v3
          restore-keys: |
            ${{ runner.os }}-${{ inputs.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}-v3
            ${{ runner.os }}-${{ inputs.node-version }}-v3
            ${{ runner.os }}-${{ inputs.node-version }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: |
          for cmd in ${{ inputs.test-commands }}; do
            echo "Running: $cmd"
            $cmd
          done

      - name: Build application
        run: ${{ inputs.build-command }}
        env:
          NODE_ENV: production
          RESEND_API_KEY: 'dummy_key_for_build'

      - name: Upload build artifacts
        if: ${{ inputs.upload-artifacts }}
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 7
